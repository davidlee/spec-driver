[project]
name = "spec-driver"
version = "0.3.0"
description = "Specification-driven development toolkit with multi-language spec sync and documentation generation"
authors = [
    { name = "David Lee", email = "david@supekku.dev" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.10"
dependencies = [
    "pyyaml>=6.0.3",
    "python-frontmatter>=1.1.0",
    "typer>=0.15.0",
    "pylint-per-file-ignores>=3.1.0",
]
keywords = ["specification", "documentation", "adr", "architecture-decision-records", "spec-sync"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
Homepage = "https://github.com/davidlee/spec-driver"
Repository = "https://github.com/davidlee/spec-driver"
Issues = "https://github.com/davidlee/spec-driver/issues"

[project.scripts]
spec-driver = "supekku.cli.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["supekku"]
exclude = [
    "supekku/CLAUDE.md",
    ".direnv/",
    ".envrc",
    ".venv/",
    "flake.nix",
    "flake.lock",
    ".uv-",
    ".uv-cache/",
    ".pytest_cache/",
    "**/__pycache__/",
    "**/*.pyc",
    "**/*.pyo",
    "about/",
]
# Force-include lib/ since it's in .gitignore (meant for build artifacts, not source)
#force-include = { "supekku/scripts/lib" = "supekku/scripts/lib" }

[tool.hatch.build.targets.sdist]
exclude = [
    "supekku/CLAUDE.md",
    ".direnv/",
    ".envrc",
    ".venv/",
    "flake.nix",
    "flake.lock",
    ".uv-",
    ".uv-cache/",
    ".pytest_cache/",
    "**/__pycache__/",
    "**/*.pyc",
    "**/*.pyo",
    "about/", ## fixme
]
#force-include = { "supekku/scripts/lib" = "supekku/scripts/lib" }

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "ruff>=0.14.0",
    "pylint>=4.0.2",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra"
testpaths = [
    "supekku/scripts",
    "supekku/scripts/lib",
]

[tool.ruff]
line-length = 88
indent-width = 2
target-version = "py312"

[tool.ruff.lint]
# select = ["ALL"]
extend-select = [
      "F",    # Pyflakes
      "E",    # pycodestyle errors
      "W",    # pycodestyle warnings
      "I",    # isort
      "N",    # pep8-naming
      "UP",   # pyupgrade
      "B",    # flake8-bugbear
      "A",    # flake8-builtins
      "C4",   # flake8-comprehensions
      "ICN",  # import conventions
      "RET",  # return values
      "PTH",  # Use pathlib instead of os.path
      "COM",  # enforce trailing comma rules
      "TID",  # Some good import practices
      "RET",  # Good return practices
      "FA",   # Enforce from __future__ import annotations
      "SIM",  # simplify
      "PL",   # pylint (selective)
]

ignore = [
      "T201",    # print (CLI tools need it)
      "S101",    # assert (pytest needs it)
      "PLR0911", # too-many-return-statements
      "PLR0912", # too-many-branches
      "PLR0913", # too-many-arguments
      "PLR0915", # too-many-statements
      "C901",    # complex-structure
      "FBT001", "FBT002",  # Boolean args
      "PLR2004",  # Magic values - I have my doubts but ...
      "D",        # All pydocstyle (handle separately if wanted)
      "PTH123",   # Allow open() - sometimes clearer
      "COM812",   # formatter wants trailing comma rule suppressed
]
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.pydocstyle]
convention = "google"

[lint.per-file-ignores]
"*test*.py" = [
    "S101",    # asserts allowed in tests...
    "ARG",     # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT",     # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004", # Magic value used in comparison, ...
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"supekku/scripts/**/*.py" = [
    "E402"  # ??
]
"supekku/cli/**/*.py" = [
    "E402",    # ??
    "PLC0415"  # ??
]

#
# PyLint :: main
#
[tool.pylint.main]
fail-under = 0.73 ## FAIL-UNDER ##
reports = true
output-format = "colorized"
indent-string = "  "
load-plugins = [
    "pylint_per_file_ignores",
    "pylint.extensions.docstyle",
    "pylint.extensions.docparams",
    "pylint.extensions.mccabe",
]

[tool.pylint.parameter_documentation]
default-docstring-type = "google"

[tool.pylint.format]
indent-string = "  "
expected-line-ending-format = "LF"


[tool.pylint.'messages control']
per-file-ignores = [
    "*_test.py:protected-access",
    "*_test.py:missing-function-docstring",
]

[tool.pylint.design]
exclude-too-few-public-methods = []
ignored-parents = []
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
# max-complexity = 10
max-locals = 15
max-parents = 7
max-positional-arguments = 5
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2
