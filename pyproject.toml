[project]
name = "spec-driver"
version = "0.1.0"
description = "Specification-driven development toolkit with multi-language spec sync and documentation generation"
authors = [
    { name = "David Lee", email = "david@supekku.dev" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.10"
dependencies = [
    "pyyaml>=6.0.3",
    "python-frontmatter>=1.1.0",
]
keywords = ["specification", "documentation", "adr", "architecture-decision-records", "spec-sync"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
Homepage = "https://github.com/davidlee/spec-driver"
Repository = "https://github.com/davidlee/spec-driver"
Issues = "https://github.com/davidlee/spec-driver/issues"

[project.scripts]
spec-driver-install = "supekku.scripts.install:main"
spec-driver-sync = "supekku.scripts.sync_specs:main"
spec-driver-adr = "supekku.scripts.decision_registry:main"
spec-driver-delta = "supekku.scripts.create_delta:main"
spec-driver-delta-complete = "supekku.scripts.complete_delta:main"
spec-driver-delta-list = "supekku.scripts.list_deltas:main"
spec-driver-change-registry = "supekku.scripts.change_registry:main"
spec-driver-change-list = "supekku.scripts.list_changes:main"
spec-driver-spec = "supekku.scripts.create_new_spec:main"
spec-driver-spec-list = "supekku.scripts.list_specs:main"
spec-driver-spec-sync = "supekku.scripts.sync_tech_specs:main"
spec-driver-requirement = "supekku.scripts.create_requirement:main"
spec-driver-requirements = "supekku.scripts.requirements:main"
spec-driver-revision = "supekku.scripts.create_revision:main"
spec-driver-validate-revision = "supekku.scripts.validate_revision_blocks:main"
spec-driver-validate-workspace = "supekku.scripts.validate_workspace:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["supekku"]
exclude = [
    "supekku/CLAUDE.md",
    ".direnv/",
    ".envrc",
    ".venv/",
    "flake.nix",
    "flake.lock",
    ".uv-",
    ".uv-cache/",
    ".pytest_cache/",
    "**/__pycache__/",
    "**/*.pyc",
    "**/*.pyo",
    "about/",
]
# Force-include lib/ since it's in .gitignore (meant for build artifacts, not source)
#force-include = { "supekku/scripts/lib" = "supekku/scripts/lib" }

[tool.hatch.build.targets.sdist]
exclude = [
    "supekku/CLAUDE.md",
    ".direnv/",
    ".envrc",
    ".venv/",
    "flake.nix",
    "flake.lock",
    ".uv-",
    ".uv-cache/",
    ".pytest_cache/",
    "**/__pycache__/",
    "**/*.pyc",
    "**/*.pyo",
    "about/", ## fixme
]
#force-include = { "supekku/scripts/lib" = "supekku/scripts/lib" }

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "ruff>=0.14.0",
    "pylint>=3.3.9",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra"
testpaths = [
    "supekku/scripts",
    "supekku/scripts/lib",
]

[tool.ruff]
line-length = 88
indent-width = 2
target-version = "py312"

[tool.ruff.lint]
# select = ["E", "F", "W", "I", "N", "UP"]
# select = ["ALL"]
extend-select = [
      "F",    # Pyflakes
      "E",    # pycodestyle errors
      "W",    # pycodestyle warnings
      "I",    # isort
      "N",    # pep8-naming
      "UP",   # pyupgrade
      "B",    # flake8-bugbear
      "A",    # flake8-builtins
      "C4",   # flake8-comprehensions
      "ICN",  # import conventions
      "RET",  # return values
      "PTH",  # Use pathlib instead of os.path
      "COM",  # enforce trailing comma rules
      "TID",  # Some good import practices
      "RET",  # Good return practices
      "FA",   # Enforce from __future__ import annotations
      "SIM",  # simplify
      "PL",   # pylint (selective)
]

ignore = [
      "T201",   # print (CLI tools need it)
      "S101",   # assert (pytest needs it)
      "PLR0912", "PLR0915", "PLR0913", "PLR0911", "C901",  # Complexity (use pylint)
      "FBT001", "FBT002",  # Boolean args
      "PLR2004",  # Magic values - I have my doubts but ...
      "D",        # All pydocstyle (handle separately if wanted)
      "PTH123",   # Allow open() - sometimes clearer
]
# extend-select = [
#     "F",        # Pyflakes rules
#     "W",        # PyCodeStyle warnings
#     "E",        # PyCodeStyle errors
#     "I",        # Sort imports properly
#     "UP",       # Warn if certain things can changed due to newer Python versions
#     "C4",       # Catch incorrect use of comprehensions, dict, list, etc
#     "FA",       # Enforce from __future__ import annotations
#     "ISC",      # Good use of string concatenation
#     "ICN",      # Use common import conventions
#     "RET",      # Good return practices
#     "SIM",      # Common simplification rules
#     "TID",      # Some good import practices
#     "TC",       # Enforce importing certain types in a TYPE_CHECKING block
#     "PTH",      # Use pathlib instead of os.path
#     "TD",       # Be diligent with TODO comments
#     "A",        # detect shadowed builtins
#     "BLE",      # disallow catch-all exceptions
#     "COM",      # enforce trailing comma rules
#     "DTZ",      # require strict timezone manipulation with datetime
#     "FBT",      # detect boolean traps
#     "N",        # enforce naming conventions, e.g. ClassName vs function_name
# ]

fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.pydocstyle]
convention = "google"

[lint.per-file-ignores]
"test_*.py" = [
    "S101",    # asserts allowed in tests...
    "ARG",     # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT",     # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004", # Magic value used in comparison, ...
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"supekku/scripts/**/*.py" = ["E402"]

